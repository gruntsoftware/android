# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  before_all do
    setup_circle_ci
  end

  desc "Runs all the unit tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build screengrabDebug and test APK for screenshots"
  lane :build_and_screengrab do
    adb(command: "shell pm clear ltd.grunt.brainwallet.screengrab") rescue nil
    gradle(
        tasks: ['assembleScreengrabDebug', 'assembleScreengrabAndroidTest']
    )
    build_dir = "#{ENV['PWD']}/app/build/"
    UI.message "Build directory: #{build_dir}"
    
    # Check if APK files exist
    app_apk = "#{build_dir}/outputs/apk/screengrab/debug/*screengrab-debug.apk"
    test_apk = "#{build_dir}/outputs/apk/androidTest/screengrab/debug/*screengrab-debug-androidTest.apk"

    app_apks = Dir.glob(app_apk)
    test_apks = Dir.glob(test_apk)
    if app_apks.empty?
      UI.user_error!("App APK file not found. Please check the build output directory.")
    end

    if test_apks.empty?
      UI.user_error!("Test APK file not found. Please check the build output directory.")
    end
    app_apk = app_apks.first
    test_apk = test_apks.first

    screengrab(
      clear_previous_screenshots: true,
      app_package_name: 'ltd.grunt.brainwallet.screengrab',
      app_apk_path: app_apk,
      tests_apk_path: test_apk
    )
  end

#   desc "Submit a new Beta Build to Crashlytics Beta"
#   lane :beta do
#     gradle(task: "clean assembleRelease")
#     crashlytics
#
#     # sh "your_script.sh"
#     # You can also use other beta testing services here
#   end

#   desc "Deploy a new version to the Google Play"
#   lane :deploy do
#     gradle(task: "clean assembleRelease")
#     upload_to_play_store
#   end
end
